---
layout: post
title:  "Vim для хіпстерів, або вічне сяйво вдалих інженерних рішень"
date:   2018-03-19 08:00:00 +0200
image: https://yevhenorlov.com/assets/images/og/2018-01-19.png
categories: workflow
---

Якби я був серйозним програмістом як мій батько або мій брат, я проводив би
більше часу за написанням коду і вивченням документації. Натомість я перетворюю
свій workflow на фетиш і документую процес тут. Втім, в цього поста є більш гідний
привід: [статистика
свідчить](/assets/images/img/country_stuck_vim-1-2-1024x1024.png)<sup><a href="#fn1" id="ref1">1</a></sup>, що
нам пора серйозно поговорити про Vim.

## Життя після :q!

Коли я трохи навчився долати паніку, що охоплювала мене щоразу, як консольна
команда `git commit` закидала мене в редактор, який закривається кнопкою
живлення на комп'ютері,<sup><a href="#fn2" id="ref2">2</a></sup> мені трапилась [стаття](https://medium.freecodecamp.org/lessons-from-my-first-year-of-live-coding-on-twitch-41a32e2f41c1)
інженерки Microsoft Сюз Хінтон. Сюз щотижня стрімить на твітчі свій код, який
вона набирає у Vim. Так я вперше дізнався, що архаїчний на перший
погляд редактор має декілька переваг, які навіть сьогодні роблять його основним
інструментом для топ-спеціалістів.

![(There are dozens of us! Dozens!)](/assets/images/gif/dozens-of-us.gif)

1. **Тільки клавіатура.** Для мене це стало найважливішим аргументом, і, водночас,
   найменш очевидним. Цінність стає зрозумілою, коли через півдня
   роботи помічаєш, що руки менше втомились. Потім повертаєшся до звичного
   редактора, і тільки тут звертаєш увагу, наскільки постійне хапання за мишку
   збиває з ритму.

2. **Мінімалізм.** Я терпіти не можу більшість IDE, з якими мені доводилось
   працювати, саме за їх візуальну надмірність. Три ряди кнопок і одразу кілька
   лінтерів, що підкреслюють/виділяють код десятком кольорів, з'їдаючи при цьому
   гігабайти пам'яті, are not my idea of fun. Справа смаку, звісно, але мені
   простіше погуглити і підключити мінімум необхідного для роботи, ніж отримувати
   купу непотрібного і незрозумілого мотлоху "з коробки".

3. **Швидкість.** Див. вище. Моїм першим редактором був легковісний Sublime Text,
   але навіть йому далеко до блискавичності Vim.

4. **Інтегрованість в консоль.** Необхідний для моєї роботи мінімум інструментів:
   браузер, графічний редактор, текстовий редактор, консоль, месенджер. Кожне
   зайве відкрите вікно збільшує плутанину, тому чим більше інструментів я можу
   розмістити в консолі, тим краще. Завдяки Vim і
   [slack-term](https://github.com/erroneousboat/slack-term) мені вистачає трьох
   вікон на все.

5. **Кастомізація** Важливо, що Vim можна і треба налаштовувати. Можливості
   кастомізації настільки широкі, що це з незвички відлякує багатьох. Оптимальний
   підхід тут — ставитись до еволюції свого сетапу як до процесу, який ніколи не
   буде завершений, і додавати новий функціонал поступово, мірою виникнення потреби.

## З чого почати?

Команда `vimtutor` в терміналі пропонує стислий і зрозумілий практичний вступ
до редактора - ідеальний спосіб почати знайомство. Після освоєння навігації і
базових команд можемо влаштуватись зручніше - для цього треба створити файл
конфігурації, який Vim зчитуватиме щоразу при запуску<sup><a href="#fn3" id="ref3">3</a></sup>.

```bash
$ touch ~/.vimrc
```

Саме у `.vimrc` прописуються основні користувацькі налаштування: меппінг команд,
підсвітка синтаксису, відступи, елементи інтерфейсу тощо. Писати файл з нуля не
потрібно, краще взяти чужий за основу. Я запозичив більшу частину у вищезгаданої
Сюз Хінтон, [моя конфігурація](https://github.com/yevhenorlov/dotfiles/blob/master/.vimrc)
також лежить у відкритому доступі.

Варто виділити декілька налаштувань, які особливо полегшать роботу тим, хто
прийшов з більш традиційних редакторів (тобто всім, хто використовує Vim в 2018 році).

```
set clipboard=unnamed    " використовувати загальний буфер обміну замість вбудованого у Vim
set smartindent          " автоматичний відступ там, де це потрібно
set number               " показувати номер рядка по лівому краю
set cursorline           " підсвітити рядок
set showmatch            " підсвітити парну дужку для дужки під курсором
set incsearch            " пошук одразу при введення запиту
set hlsearch             " підсвітити результати пошуку
set ignorecase smartcase " пошук з врахуванням регістру лише тоді, коли в запиті є великі літери
set backspace=2          " зняти обмеження для backspace
```

## Any colour you like

Файли кольорової підсвітки зберігаються окремо. Я використовую палітру
[dracula](https://draculatheme.com/vim/) всюди, де це можливо (включаючи цей
сайт), гугл має знати більше про ваші улюблені теми.

Підключати просто. З папки, в якій знаходиться файл підсвітки:

```bash
$ mkdir -p ~/.vim/colors && mv dracula.vim $_
```

Після цього підключити файл в `.vimrc`:

```vim
syntax on
color dracula
```

## Vim на стероїдах

Користувачі ставлять різні вимоги до редактора коду залежно від своїх смаків і
повсякденних задач. Цей попит екосистема Vim успішно задовольняє за допомогою
надзвичайно широкого набору доступних плагінів, які розширюють базовий
функціонал. Для пошуку під конкретні потреби є чудовий сайт
[vimawesome.com](https://vimawesome.com/), але так само, як і з конфігурацією
`.vimrc`, можна виділити базовий набір корисних плагінів.

1. [NerdTree](https://github.com/scrooloose/nerdtree). Сайдбар для навігації по проекту, звичний для популярних редакторів.

2. [CtrlP](https://github.com/ctrlpvim/ctrlp.vim). Fuzzy search aka "пухнастий пошук", моментальний пошук файлів у проекті за їх назвою.

3. [vim-airline](https://github.com/vim-airline/vim-airline). Легковісна панель статусу для зручної орієнтації в основному вікні.

4. [vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors/).
   Мультикурсор для одночасного редагування тексту в кількох точках файлу.

5. [vim-surround](https://github.com/tpope/vim-surround). Коли потрібно швидко змінити
   тип дужок навколо виразу.

Про те, як зручно підключити vim-плагіни і підтримувати їх оновленими до останньої
версії, піде мова у наступному пості.

<aside class="footnotes">
  <ol><li id="fn1"><a href="https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/">Stack Overflow: Helping One Million Developers Exit Vim.</a>
  <a href="#ref1" title="Повернутися до зноски 1 в тексті.">&#8617;</a></li>
    <li id="fn2">Перший варіант поста включав лічильник літредакторів, які
    померли на цьому реченні. Автор відмовляється вибачатись.
<a href="#ref2" title="Повернутися до зноски 2 в тексті.">&#8617;</a></li>

<li id="fn3">Не буде несподіванкою той факт, що процес налаштування Vim відрізняється для UNIX і
Windows. Оскільки я описую свій процес, наведені тут кроки підходять для Mac-юзерів
і, скоріш за все, підійдуть для користувачів Linux. Тим не менш, попри відмінності в
файлових системах, внутрішня конфігурація Vim практично не відрізняється.
<a href="#ref3" title="Повернутися до зноски 3 в тексті.">&#8617;</a></li>
  </ol>
</aside>
